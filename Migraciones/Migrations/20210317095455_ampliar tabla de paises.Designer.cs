// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicioDeDatos;

namespace GestorDeEntorno.Migrations
{
    [DbContext(typeof(ContextoSe))]
    [Migration("20210317095455_ampliar tabla de paises")]
    partial class ampliartabladepaises
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ServicioDeDatos.Archivos.ArchivoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AlmacenadoEn")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2000)")
                        .HasColumnName("RUTA");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FECCRE");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FECMOD");

                    b.Property<int>("IdUsuaCrea")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUCREA");

                    b.Property<int?>("IdUsuaModi")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUMODI");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuaCrea")
                        .HasDatabaseName("I_ARCHIVO_IDUSUCREA");

                    b.HasIndex("IdUsuaModi")
                        .HasDatabaseName("I_ARCHIVO_IDUSUMODI");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("I_ARCHIVO_NOMBRE");

                    b.ToTable("ARCHIVO", "SISDOC");
                });

            modelBuilder.Entity("ServicioDeDatos.Callejero.PaisDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(3)")
                        .HasColumnName("CODIGO");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FECCRE");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FECMOD");

                    b.Property<string>("ISO2")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("ISO2");

                    b.Property<int>("IdUsuaCrea")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUCREA");

                    b.Property<int?>("IdUsuaModi")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUMODI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NAME");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Prefijo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("PREFIJO");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuaCrea")
                        .HasDatabaseName("I_PAIS_IDUSUCREA");

                    b.HasIndex("IdUsuaModi")
                        .HasDatabaseName("I_PAIS_IDUSUMODI");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("I_PAIS_NOMBRE");

                    b.ToTable("PAIS", "CALLEJERO");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.ArbolDeMenuDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<bool>("Activo")
                        .HasColumnType("BIT")
                        .HasColumnName("ACTIVO");

                    b.Property<string>("Controlador")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("CONTROLADOR");

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ICONO");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("INT")
                        .HasColumnName("IDPADRE");

                    b.Property<int?>("IdVistaMvc")
                        .HasColumnType("INT")
                        .HasColumnName("IDVISTA_MVC");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.Property<int>("Orden")
                        .HasColumnType("INT")
                        .HasColumnName("ORDEN");

                    b.Property<string>("Padre")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("PADRE");

                    b.Property<string>("Vista")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("VISTA");

                    b.Property<string>("accion")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ACCION");

                    b.Property<string>("parametros")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("PARAMETROS");

                    b.HasKey("Id");

                    b.ToTable("MENU_SE", "ENTORNO");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.MenuDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<bool>("Activo")
                        .HasColumnType("BIT")
                        .HasColumnName("ACTIVO");

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ICONO");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("INT")
                        .HasColumnName("IDPADRE");

                    b.Property<int?>("IdVistaMvc")
                        .HasColumnType("INT")
                        .HasColumnName("IDVISTA_MVC");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("ORDEN");

                    b.HasKey("Id");

                    b.HasIndex("IdPadre");

                    b.HasIndex("IdVistaMvc");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("MENU", "ENTORNO");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.PermisosDeUnUsuarioDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPermiso")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUA");

                    b.Property<string>("Origen")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("ORIGEN")
                        .HasComputedColumnSql("SEGURIDAD.OBTENER_ORIGEN(idusua,idpermiso)");

                    b.HasKey("Id");

                    b.HasIndex("IdPermiso");

                    b.HasIndex("IdUsuario");

                    b.ToTable("USU_PERMISO", "ENTORNO");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.UsuarioDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Alta")
                        .HasColumnType("DATE")
                        .HasColumnName("F_ALTA");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("APELLIDO");

                    b.Property<bool>("EsAdministrador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("ADMINISTRADOR");

                    b.Property<int?>("IdArchivo")
                        .HasColumnType("INT")
                        .HasColumnName("IDARCHIVO");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("LOGIN");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("eMail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("pendiente@se.com")
                        .HasColumnName("EMAIL");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("PASSWORD");

                    b.HasKey("Id");

                    b.HasIndex("IdArchivo")
                        .HasDatabaseName("I_USUARIO_IDARCHIVO");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("IX_USUARIO");

                    b.ToTable("USUARIO", "ENTORNO");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.VariableDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("VALOR");

                    b.HasKey("Id");

                    b.ToTable("VARIABLE", "ENTORNO");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.VistaMvcDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ACCION");

                    b.Property<string>("Controlador")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("CONTROLADOR");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO");

                    b.Property<bool>("MostrarEnModal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("MODAL");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Parametros")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("PARAMETROS");

                    b.HasKey("Id");

                    b.HasIndex("IdPermiso")
                        .IsUnique()
                        .HasDatabaseName("IX_VISTA_MVC_IDPERMISO");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_VARIABLE");

                    b.HasIndex("Controlador", "Accion", "Parametros")
                        .IsUnique()
                        .HasDatabaseName("IX_VISTA_MVC")
                        .HasFilter("[PARAMETROS] IS NOT NULL");

                    b.ToTable("VISTA_MVC", "ENTORNO");
                });

            modelBuilder.Entity("ServicioDeDatos.Negocio.ModoDeAccesoAlNegocioDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<bool>("Administrador")
                        .HasColumnType("BIT")
                        .HasColumnName("ADMINISTRADOR");

                    b.Property<bool>("Consultor")
                        .HasColumnType("BIT")
                        .HasColumnName("CONSULTOR");

                    b.Property<bool>("Gestor")
                        .HasColumnType("BIT")
                        .HasColumnName("GESTOR");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUA");

                    b.Property<string>("Origen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MODO_ACCESO_NEGOCIO", "NEGOCIO");
                });

            modelBuilder.Entity("ServicioDeDatos.Negocio.NegocioDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("ACTIVO");

                    b.Property<string>("Elemento")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ELEMENTO");

                    b.Property<string>("Icono")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ICONO");

                    b.Property<int>("IdPermisoDeAdministrador")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO_ADMINISTRADOR");

                    b.Property<int>("IdPermisoDeConsultor")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO_CONSULTOR");

                    b.Property<int>("IdPermisoDeGestor")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO_GESTOR");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Id");

                    b.HasIndex("IdPermisoDeAdministrador")
                        .IsUnique()
                        .HasDatabaseName("IX_NEGOCIO_IDPERMISO_ADMINISTRADOR");

                    b.HasIndex("IdPermisoDeConsultor")
                        .IsUnique()
                        .HasDatabaseName("IX_NEGOCIO_IDPERMISO_CONSULTOR");

                    b.HasIndex("IdPermisoDeGestor")
                        .IsUnique()
                        .HasDatabaseName("IX_NEGOCIO_IDPERMISO_GESTOR");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_NEGOCIO_NOMBRE");

                    b.ToTable("NEGOCIO", "NEGOCIO");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.ClasePermisoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("I_CLASE_PERMISO_NOMBRE");

                    b.ToTable("CLASE_PERMISO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdClase")
                        .HasColumnType("INT")
                        .HasColumnName("IDCLASE");

                    b.Property<int>("IdTipo")
                        .HasColumnType("INT")
                        .HasColumnName("IDTIPO");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Id");

                    b.HasIndex("IdTipo");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("I_PERMISO_NOMBRE");

                    b.HasIndex("IdClase", "IdTipo")
                        .HasDatabaseName("I_PERMISO_IDCLASE_IDTIPO");

                    b.ToTable("PERMISO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisosDeUnPuestoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .HasComputedColumnSql("CAST(ROW_NUMBER() OVER(ORDER BY t2.IDUSUA ASC) as int)");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO");

                    b.Property<int>("IdPuesto")
                        .HasColumnType("INT")
                        .HasColumnName("IDPUESTO");

                    b.Property<string>("Roles")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("ROLES")
                        .HasComputedColumnSql("SEGURIDAD.OBTENER_ORIGEN_PUESTO_PERMISO(IDPUESTO, IDPERMISO)");

                    b.HasKey("Id");

                    b.HasIndex("IdPermiso");

                    b.HasIndex("IdPuesto");

                    b.ToView("PUESTO_PERMISO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisosDeUnRolDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPermiso")
                        .HasColumnType("INT")
                        .HasColumnName("IDPERMISO");

                    b.Property<int>("IdRol")
                        .HasColumnType("INT")
                        .HasColumnName("IDROL");

                    b.HasKey("Id");

                    b.HasAlternateKey("IdRol", "IdPermiso")
                        .HasName("AK_ROL_PERMISO");

                    b.HasIndex("IdPermiso");

                    b.ToTable("ROL_PERMISO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PuestoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("RolesDeUnPuesto")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("ROLES")
                        .HasComputedColumnSql("SEGURIDAD.OBTENER_ROLES_DE_UN_PUESTO(id)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("I_PUESTO_NOMBRE");

                    b.ToTable("PUESTO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PuestosDeUnUsuarioDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPuesto")
                        .HasColumnType("INT")
                        .HasColumnName("IDPUESTO");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("INT")
                        .HasColumnName("IDUSUA");

                    b.Property<string>("RolesDeUnPuesto")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("ROLES")
                        .HasComputedColumnSql("SEGURIDAD.OBTENER_ROLES_DE_UN_PUESTO(idPuesto)");

                    b.HasKey("Id");

                    b.HasIndex("IdPuesto")
                        .HasDatabaseName("I_USU_PUESTO_IDPUESTO");

                    b.HasIndex("IdUsuario")
                        .HasDatabaseName("I_USU_PUESTO_IDUSUA");

                    b.HasIndex("IdPuesto", "IdUsuario")
                        .IsUnique()
                        .HasDatabaseName("I_USU_PUESTO_IDPUESTO_IDUSUA");

                    b.ToTable("USU_PUESTO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.RolDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("I_ROL_NOMBRE");

                    b.ToTable("ROL", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.RolesDeUnPuestoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdPuesto")
                        .HasColumnType("INT")
                        .HasColumnName("IDPUESTO");

                    b.Property<int>("IdRol")
                        .HasColumnType("INT")
                        .HasColumnName("IDROL");

                    b.HasKey("Id");

                    b.HasAlternateKey("IdRol", "IdPuesto")
                        .HasName("AK_ROL_PUESTO");

                    b.HasIndex("IdPuesto");

                    b.ToTable("ROL_PUESTO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.TipoPermisoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("I_TIPO_PERMISO_NOMBRE");

                    b.ToTable("TIPO_PERMISO", "SEGURIDAD");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.ErrorDeUnTrabajoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Detalle")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DETALLE");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2000)")
                        .HasColumnName("ERROR");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FECHA");

                    b.Property<int>("IdTrabajoDeUsuario")
                        .HasColumnType("INT")
                        .HasColumnName("ID_TRABAJO_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("IdTrabajoDeUsuario");

                    b.ToTable("ERROR", "TRABAJO");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.SemaforoDeTrabajosDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdTrabajoUsuario")
                        .HasColumnType("INT")
                        .HasColumnName("ID_TRABAJO");

                    b.Property<DateTime>("Iniciado")
                        .HasColumnType("DATETIME")
                        .HasColumnName("INICIADO");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("LOGIN");

                    b.HasKey("Id");

                    b.HasAlternateKey("IdTrabajoUsuario")
                        .HasName("AK_SEMAFORO_TRABAJO_ID_TRABAJO");

                    b.ToTable("SEMAFORO", "TRABAJO");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.TrabajoDeUsuarioDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Encolado")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ENTRADA");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("ESTADO");

                    b.Property<int>("IdEjecutor")
                        .HasColumnType("INT")
                        .HasColumnName("ID_EJECUTOR");

                    b.Property<int>("IdSometedor")
                        .HasColumnType("INT")
                        .HasColumnName("ID_SOMETEDOR");

                    b.Property<int>("IdTrabajo")
                        .HasColumnType("INT")
                        .HasColumnName("ID_TRABAJO");

                    b.Property<DateTime?>("Iniciado")
                        .HasColumnType("DATETIME")
                        .HasColumnName("INICIADO");

                    b.Property<string>("Parametros")
                        .HasColumnType("VARCHAR(2000)")
                        .HasColumnName("PARAMETROS");

                    b.Property<int>("Periodicidad")
                        .HasColumnType("INT")
                        .HasColumnName("PERIODICIDAD");

                    b.Property<DateTime>("Planificado")
                        .HasColumnType("DATETIME")
                        .HasColumnName("PLANIFICADO");

                    b.Property<DateTime?>("Terminado")
                        .HasColumnType("DATETIME")
                        .HasColumnName("TERMINADO");

                    b.HasKey("Id");

                    b.HasIndex("IdEjecutor");

                    b.HasIndex("IdSometedor");

                    b.HasIndex("IdTrabajo");

                    b.ToTable("USUARIO", "TRABAJO");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.TrabajoSometidoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Clase")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("CLASE");

                    b.Property<bool>("ComunicarError")
                        .HasColumnType("BIT")
                        .HasColumnName("COMUNICAR_ERROR");

                    b.Property<bool>("ComunicarFin")
                        .HasColumnType("BIT")
                        .HasColumnName("COMUNICAR_FIN");

                    b.Property<string>("Dll")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("DLL");

                    b.Property<bool>("EsDll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("ES_DLL");

                    b.Property<string>("Esquema")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("ESQUEMA");

                    b.Property<int?>("IdEjecutor")
                        .HasColumnType("INT")
                        .HasColumnName("ID_EJECUTOR");

                    b.Property<int?>("IdInformarA")
                        .HasColumnType("INT")
                        .HasColumnName("ID_INFORMAR_A");

                    b.Property<string>("Metodo")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("METODO");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Pa")
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("PA");

                    b.HasKey("Id");

                    b.HasIndex("IdEjecutor");

                    b.HasIndex("IdInformarA");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_TRABAJO_NOMBRE");

                    b.HasIndex("Esquema", "Pa")
                        .IsUnique()
                        .HasDatabaseName("IX_TRABAJO_PA")
                        .HasFilter("[ESQUEMA] IS NOT NULL AND [PA] IS NOT NULL");

                    b.HasIndex("Dll", "Clase", "Metodo")
                        .IsUnique()
                        .HasDatabaseName("IX_TRABAJO_METODO")
                        .HasFilter("[DLL] IS NOT NULL AND [CLASE] IS NOT NULL AND [METODO] IS NOT NULL");

                    b.ToTable("TRABAJO", "TRABAJO");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.TrazaDeUnTrabajoDtm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FECHA");

                    b.Property<int>("IdTrabajoDeUsuario")
                        .HasColumnType("INT")
                        .HasColumnName("ID_TRABAJO_USUARIO");

                    b.Property<string>("Traza")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("LOG");

                    b.HasKey("Id");

                    b.HasIndex("IdTrabajoDeUsuario");

                    b.ToTable("TRAZA", "TRABAJO");
                });

            modelBuilder.Entity("ServicioDeDatos.Archivos.ArchivoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("IdUsuaCrea")
                        .HasConstraintName("FK_ARCHIVO_IDUSUCREA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("IdUsuaModi")
                        .HasConstraintName("FK_ARCHIVO_IDUSUMODI")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("ServicioDeDatos.Callejero.PaisDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("IdUsuaCrea")
                        .HasConstraintName("FK_PAIS_IDUSUCREA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("IdUsuaModi")
                        .HasConstraintName("FK_PAIS_IDUSUMODI")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.MenuDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Entorno.MenuDtm", "Padre")
                        .WithMany("Submenus")
                        .HasForeignKey("IdPadre")
                        .HasConstraintName("FK_MENU_IDPADRE");

                    b.HasOne("ServicioDeDatos.Entorno.VistaMvcDtm", "VistaMvc")
                        .WithMany("Menus")
                        .HasForeignKey("IdVistaMvc")
                        .HasConstraintName("FK_MENU_IDVISTA_MVC");

                    b.Navigation("Padre");

                    b.Navigation("VistaMvc");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.PermisosDeUnUsuarioDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "Permiso")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdPermiso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "Usuario")
                        .WithMany("Permisos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.UsuarioDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Archivos.ArchivoDtm", "Archivo")
                        .WithMany()
                        .HasForeignKey("IdArchivo")
                        .HasConstraintName("FK_USUARIO_IDARCHIVO")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Archivo");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.VistaMvcDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "Permiso")
                        .WithMany()
                        .HasForeignKey("IdPermiso")
                        .HasConstraintName("FK_VISTA_MVC_IDPERMISO")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Permiso");
                });

            modelBuilder.Entity("ServicioDeDatos.Negocio.NegocioDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "PermisoDeAdministrador")
                        .WithMany()
                        .HasForeignKey("IdPermisoDeAdministrador")
                        .HasConstraintName("FK_NEGOCIO_IDPERMISO_ADMINISTRADOR")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "PermisoDeConsultor")
                        .WithMany()
                        .HasForeignKey("IdPermisoDeConsultor")
                        .HasConstraintName("FK_NEGOCIO_IDPERMISO_CONSULTOR")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "PermisoDeGestor")
                        .WithMany()
                        .HasForeignKey("IdPermisoDeGestor")
                        .HasConstraintName("FK_NEGOCIO_IDPERMISO_GESTOR")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermisoDeAdministrador");

                    b.Navigation("PermisoDeConsultor");

                    b.Navigation("PermisoDeGestor");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.ClasePermisoDtm", "Clase")
                        .WithMany("Permisos")
                        .HasForeignKey("IdClase")
                        .HasConstraintName("FK_PERMISO_IDCLASE")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Seguridad.TipoPermisoDtm", "Tipo")
                        .WithMany("Permisos")
                        .HasForeignKey("IdTipo")
                        .HasConstraintName("FK_PERMISO_IDTIPO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clase");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisosDeUnPuestoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "Permiso")
                        .WithMany("Puestos")
                        .HasForeignKey("IdPermiso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Seguridad.PuestoDtm", "Puesto")
                        .WithMany("Permisos")
                        .HasForeignKey("IdPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Puesto");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisosDeUnRolDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PermisoDtm", "Permiso")
                        .WithMany("Roles")
                        .HasForeignKey("IdPermiso")
                        .HasConstraintName("FK_ROL_PERMISO_IDPERMISO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Seguridad.RolDtm", "Rol")
                        .WithMany("Permisos")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_ROL_PERMISO_IDROL")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PuestosDeUnUsuarioDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PuestoDtm", "Puesto")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdPuesto")
                        .HasConstraintName("FK_USU_PUESTO_IDPUESTO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "Usuario")
                        .WithMany("Puestos")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_USU_PUESTO_IDUSUA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Puesto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.RolesDeUnPuestoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Seguridad.PuestoDtm", "Puesto")
                        .WithMany("Roles")
                        .HasForeignKey("IdPuesto")
                        .HasConstraintName("FK_ROL_PUESTO_IDPUESTO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Seguridad.RolDtm", "Rol")
                        .WithMany("Puestos")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_ROL_PUESTO_IDROL")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Puesto");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.ErrorDeUnTrabajoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.TrabajosSometidos.TrabajoDeUsuarioDtm", "TrabajoDeUsuario")
                        .WithMany()
                        .HasForeignKey("IdTrabajoDeUsuario")
                        .HasConstraintName("FK_ERROR_DE_TRABAJO_ID_TRABAJO_USUARIO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrabajoDeUsuario");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.TrabajoDeUsuarioDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "Ejecutor")
                        .WithMany()
                        .HasForeignKey("IdEjecutor")
                        .HasConstraintName("FK_TRABAJO_DE_USUARIO_ID_EJECUTOR")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "Sometedor")
                        .WithMany()
                        .HasForeignKey("IdSometedor")
                        .HasConstraintName("FK_TRABAJO_DE_USUARIO_ID_SOMETEDOR")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioDeDatos.TrabajosSometidos.TrabajoSometidoDtm", "Trabajo")
                        .WithMany()
                        .HasForeignKey("IdTrabajo")
                        .HasConstraintName("FK_TRABAJO_DE_USUARIO_ID_TRABAJO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ejecutor");

                    b.Navigation("Sometedor");

                    b.Navigation("Trabajo");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.TrabajoSometidoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.Entorno.UsuarioDtm", "Ejecutor")
                        .WithMany()
                        .HasForeignKey("IdEjecutor")
                        .HasConstraintName("FK_TRABAJO_ID_EJECUTOR")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServicioDeDatos.Seguridad.PuestoDtm", "InformarA")
                        .WithMany()
                        .HasForeignKey("IdInformarA")
                        .HasConstraintName("FK_TRABAJO_ID_INFORMAR_A")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ejecutor");

                    b.Navigation("InformarA");
                });

            modelBuilder.Entity("ServicioDeDatos.TrabajosSometidos.TrazaDeUnTrabajoDtm", b =>
                {
                    b.HasOne("ServicioDeDatos.TrabajosSometidos.TrabajoDeUsuarioDtm", "TrabajoDeUsuario")
                        .WithMany()
                        .HasForeignKey("IdTrabajoDeUsuario")
                        .HasConstraintName("FK_LOG_DE_TRABAJO_ID_TRABAJO_USUARIO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrabajoDeUsuario");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.MenuDtm", b =>
                {
                    b.Navigation("Submenus");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.UsuarioDtm", b =>
                {
                    b.Navigation("Permisos");

                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("ServicioDeDatos.Entorno.VistaMvcDtm", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.ClasePermisoDtm", b =>
                {
                    b.Navigation("Permisos");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PermisoDtm", b =>
                {
                    b.Navigation("Puestos");

                    b.Navigation("Roles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.PuestoDtm", b =>
                {
                    b.Navigation("Permisos");

                    b.Navigation("Roles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.RolDtm", b =>
                {
                    b.Navigation("Permisos");

                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("ServicioDeDatos.Seguridad.TipoPermisoDtm", b =>
                {
                    b.Navigation("Permisos");
                });
#pragma warning restore 612, 618
        }
    }
}
